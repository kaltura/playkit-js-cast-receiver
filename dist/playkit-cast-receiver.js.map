{"version":3,"sources":["./cast/receiver/webpack/bootstrap","./cast/receiver/external [\"KalturaPlayer\"]","./cast/receiver/./cast-engine.js","./cast/receiver/./default-player-config.js","./cast/receiver/./error/error.js","./cast/receiver/./error/error-type.js","./cast/receiver/./player-loader.js","./cast/receiver/./receiver-tracks-manager.js","./cast/receiver/./receiver-ads-manager.js","./cast/receiver/./receiver-manager.js","./cast/receiver/./receiver-manager-api.js","./cast/receiver/./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","KalturaPlayer","core","Track","Utils","FakeEvent","MediaType","getLogger","FakeEventTarget","EventManager","EventType","AudioTrack","TextTrack","AbrMode","MimeType","CastEngine","source","config","ABORT","CAN_PLAY","CAN_PLAY_THROUGH","DURATION_CHANGE","EMPTIED","ENDED","LOADED_DATA","LOADED_METADATA","LOAD_START","PAUSE","PLAY","PLAYING","PROGRESS","RATE_CHANGE","SEEKED","SEEKING","STALLED","TIME_UPDATE","SUSPEND","WAITING","_context","cast","framework","CastReceiverContext","getInstance","_playerManager","getPlayerManager","_eventManager","_createVideoElement","_init","canPlaySource","mimeType","mimetype","toLowerCase","_supportedMimeTypes","includes","drmData","DASH","createEngine","this","restore","reset","attach","videoElement","getVideoElement","listen","_seeking","_ended","isLive","dispatchEvent","broadcastStatus","_mediaElementEvents","forEach","mediaElementEvent","detach","runCapabilities","prepareVideoElement","getCapabilities","Promise","resolve","id","autoplay","mutedAutoPlay","_el","load","startTime","_logger","debug","_isLoaded","_parseTracks","ABR_MODE_CHANGED","AUTO","_tracks","tracks","play","_paused","pause","hideTextTrack","selectTextTrack","textTrack","TEXT_TRACK_CHANGED","selectedTextTrack","selectAudioTrack","audioTrack","AUDIO_TRACK_CHANGED","selectedAudioTrack","selectVideoTrack","videoTrack","VIDEO_TRACK_CHANGED","selectedVideoTrack","enableAdaptiveBitrate","isAdaptiveBitrateEnabled","getSelectedSource","copyDeep","_source","_config","sources","type","LIVE","seekToLiveEdge","range","getLiveSeekableRange","seek","end","getStartTimeOfDvrWindow","start","removeAll","destroy","_volume","_muted","Dom","removeAttribute","removeChild","parentNode","castMediaPlayerEl","document","getElementsByTagName","CAST_MEDIA_PLAYER_TAG","getMediaElement","castAudioTracks","getAudioTracksManager","getTracks","audioTracks","_parseAudioTracks","castTextTracks","getTextTracksManager","textTracks","_parseTextTracks","concat","track","settings","trackId","index","label","language","kind","subType","active","push","getCurrentTimeSec","getDurationSec","VOLUME_CHANGE","url","playsinline","playbackRate","getPlaybackRate","crossOrigin","HLS","PROGRESSIVE","SMOOTH_STREAMING","StreamType","EngineType","DefaultPlayerConfig","playback","preload","disableUserCache","streamPriority","engine","CAST","format","ui","disable","ReceiverError","code","description","ErrorType","unRegisterEngine","registerEngine","PlayerLoader","loadPlayer","castMediaElement","style","position","playerContainerEl","createElement","display","appendChild","body","HTML5","playerConfig","mergeDeep","targetId","player","setup","prependTo","TextStyleConverter","remote","TrackType","ReceiverTracksManager","_player","_attachListeners","setInitialTracks","mediaInfo","getMediaInformation","customData","_setInitialAudioTrack","audioLanguage","_setInitialTextTrack","textLanguage","addEventListener","events","REQUEST_EDIT_TRACKS_INFO","requestEvent","activeTrackIds","requestData","_handleAudioTrackSelection","_handleTextTrackSelection","textTrackStyle","_handleTextStyleSelection","TEXT","activeTextTrack","find","nextActiveTextTrack","selectTrack","offTrack","AUDIO","activeAudioTrack","nextActiveAudioTrack","textStyle","toPlayerTextStyle","textTracksManager","some","setActiveByLanguage","warn","audioTracksManager","length","audioTrackId","setActiveById","Ad","AdBreak","AdBreakType","CustomEventMessage","ReceiverAdsManager","AD_REACHED_25_PERCENT","AD_REACHED_50_PERCENT","AD_REACHED_75_PERCENT","positions","breakManager","getBreakManager","breaks","getBreaks","b","_sendEventAndCustomMessage","Event","AD_MANIFEST_LOADED","adBreaksPosition","breaksEvent","_toggleAdBreakListeners","adBreakOptions","_getAdBreakOptions","adBreak","AD_BREAK_START","_adBreak","AD_BREAK_END","findIndex","breakId","ALL_ADS_COMPLETED","adOptions","_getAdOptions","ad","breakClipId","AD_LOADED","_ad","AD_STARTED","_adIsPlaying","AD_COMPLETED","_adCanSkipTriggered","AD_PAUSED","AD_RESUMED","adDuration","getBreakClipDurationSec","adCurrentTime","getBreakClipCurrentTimeSec","percent","_timePercentEvent","AD_FIRST_QUARTILE","AD_MIDPOINT","AD_THIRD_QUARTILE","skippable","skipOffset","AD_CAN_SKIP","AD_PROGRESS","adProgress","currentTime","duration","muted","AD_MUTED","AD_VOLUME_CHANGED","skipAd","messages","RequestData","MessageType","SKIP_AD","sendLocalMediaRequest","_adLifecycleEventHandlers","PLAYER_LOAD_COMPLETE","_onPlayerLoadComplete","BREAK_STARTED","_onBreakStarted","BREAK_ENDED","_onBreakEnded","BREAK_CLIP_LOADING","_onBreakClipLoading","BREAK_CLIP_STARTED","_onBreakClipStarted","BREAK_CLIP_ENDED","_onBreakClipEnded","_adTrackingEventHandlers","_onAdPaused","_onAdResumed","_playerEventHandlers","MUTE_CHANGE","_onMuteChange","_onVolumeChange","keys","event","toggle","_adProgressIntervalId","setInterval","_onAdProgress","removeEventListener","clearInterval","options","currentBreak","getBreakById","_getAdBreakTypeByPosition","numAds","breakClipIds","PRE","POST","MID","currentBreakClip","getBreakClipById","contentId","contentType","title","indexOf","clickThroughUrl","posterUrl","whenSkippable","linear","payload","toUpperCase","sendCustomMessage","CUSTOM_CHANNEL","undefined","receiverManager","DrmScheme","CustomMessageType","CustomActionType","CustomActionMessage","ReceiverManager","LOAD","onLoad","MEDIA_STATUS","onMediaStatus","STOP","onStop","REQUEST_PLAY","_onRequestPlayEvent","REQUEST_PAUSE","_onRequestPauseEvent","_onPlayEvent","_onPlayerLoadCompleteEvent","system","SYSTEM_VOLUME_CHANGED","_onSystemVolumeChangedEvent","_tracksManager","_adsManager","getPlayer","defaultOptions","CastReceiverOptions","customNamespaces","JSON","loadRequestData","_reset","resovle","reject","media","mediaConfig","_maybeCreateVmapAdsRequest","_maybeReplaceAdTagTimestamp","ERROR","SOURCE_SELECTED","_onSourceSelected","loadMedia","setMedia","_destroy","mediaStatus","getMediaInfo","playerState","getPlayerState","addCustomMessageListener","customMessage","_onCustomMessage","_playerManagerEventHandlers","_messageInterceptorsHandlers","msg","setMessageInterceptor","_castContextEventHandlers","_shouldAutoPlay","_firstPlay","_clearBroadcastStatusInterval","selectedSource","_handleAutoPlay","_handleLiveDvr","_setMediaInfo","_maybeSetDrmLicenseUrl","forceRedirectExternalStreams","Http","jsonp","contentUrl","data","redirectExternalStreamsHandler","streamType","BUFFERED","metadata","GenericMediaMetadata","subtitle","images","poster","hlsSegmentFormat","HlsSegmentFormat","TS","isDvr","scheme","WIDEVINE","setMediaPlaybackInfoHandler","loadRequest","playbackConfig","protectionSystem","ContentProtection","licenseUrl","firstPlay","_broadcastStatusIntervalId","loadPlayerAndSetInitialTracks","ready","then","listenOnce","systemVolumeChangedEvent","volume","level","customMessageEvent","ACTION","_handleCustomAction","customAction","action","vmapAdsRequest","replaceTimestamp","adtag","regex","test","match","replace","Date","now","breakClips","breakClip","vastAdsRequest","adTagUrl","ReceiverManagerAPI","listener","VERSION","__VERSION__","NAME","__NAME__"],"mappings":"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","file":"playkit-cast-receiver.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = KalturaPlayer;","// @flow\nimport {core} from 'kaltura-player-js';\nimport {CAST_MEDIA_PLAYER_TAG} from './player-loader';\n\nconst {Track, Utils, FakeEvent, MediaType, getLogger, FakeEventTarget, EventManager, EventType, AudioTrack, TextTrack, AbrMode, MimeType} = core;\n\nclass CastEngine extends FakeEventTarget {\n  static get id(): string {\n    return 'cast';\n  }\n\n  static canPlaySource(source: Object): boolean {\n    const mimeType = source.mimetype.toLowerCase();\n    const supported = CastEngine._supportedMimeTypes.includes(mimeType);\n    if (supported) {\n      if (source.drmData) {\n        return MimeType.DASH.includes(mimeType);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  static createEngine(source: Object, config: Object): Object {\n    return new this(source, config);\n  }\n\n  static _logger: any = getLogger('CastEngine');\n\n  static _supportedMimeTypes: Array<string> = [...MimeType.HLS, ...MimeType.DASH, ...MimeType.PROGRESSIVE, ...MimeType.SMOOTH_STREAMING];\n\n  _el: HTMLVideoElement;\n  _source: Object;\n  _config: Object;\n  _eventManager: EventManager;\n  _isLoaded: boolean = false;\n  _tracks: Array<Track> = [];\n  _volume: number = 1;\n  _muted: boolean = false;\n  _paused: boolean = false;\n  _seeking: boolean = false;\n  _ended: boolean = false;\n  _mediaElementEvents: Array<string> = [\n    EventType.ABORT,\n    EventType.CAN_PLAY,\n    EventType.CAN_PLAY_THROUGH,\n    EventType.DURATION_CHANGE,\n    EventType.EMPTIED,\n    EventType.ENDED,\n    EventType.LOADED_DATA,\n    EventType.LOADED_METADATA,\n    EventType.LOAD_START,\n    EventType.PAUSE,\n    EventType.PLAY,\n    EventType.PLAYING,\n    EventType.PROGRESS,\n    EventType.RATE_CHANGE,\n    EventType.SEEKED,\n    EventType.SEEKING,\n    EventType.STALLED,\n    EventType.TIME_UPDATE,\n    EventType.SUSPEND,\n    EventType.WAITING\n  ];\n\n  constructor(source: Object, config: Object) {\n    super();\n    this._context = cast.framework.CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._eventManager = new EventManager();\n    this._createVideoElement();\n    this._init(source, config);\n  }\n\n  restore(source: Object, config: Object): void {\n    this.reset();\n    this._init(source, config);\n  }\n\n  attach(): void {\n    const videoElement = this.getVideoElement();\n    this._eventManager.listen(videoElement, EventType.SEEKED, () => (this._seeking = false));\n    this._eventManager.listen(videoElement, EventType.SEEKING, () => (this._seeking = true));\n    this._eventManager.listen(videoElement, EventType.ENDED, () => {\n      this._ended = true;\n      // Receiver has a problem where the current time isn't equals to the duration when\n      // playback is ended. This prevent from analytics plugins to report 100% reached.\n      // So we're trigger time update event again on ended and take care to handle this state also in the\n      // current time setter.\n      if (!this.isLive()) {\n        this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n      }\n    });\n    if (this.isLive()) {\n      this._eventManager.listen(videoElement, EventType.TIME_UPDATE, () => this._playerManager.broadcastStatus(true));\n    }\n    this._mediaElementEvents.forEach(mediaElementEvent =>\n      this._eventManager.listen(videoElement, mediaElementEvent, () => this.dispatchEvent(new FakeEvent(mediaElementEvent)))\n    );\n  }\n\n  detach(): void {\n    // Empty implementation\n  }\n\n  static runCapabilities(): void {\n    // Empty implementation\n  }\n\n  static prepareVideoElement(): void {\n    // Empty implementation\n  }\n\n  static getCapabilities(): Promise<Object> {\n    return Promise.resolve({\n      [CastEngine.id]: {\n        autoplay: true,\n        mutedAutoPlay: true\n      }\n    });\n  }\n\n  get id(): string {\n    return CastEngine.id;\n  }\n\n  getVideoElement(): HTMLVideoElement {\n    return this._el;\n  }\n\n  load(startTime: ?number): Promise<Object> {\n    CastEngine._logger.debug('Load start', startTime);\n    this._isLoaded = true;\n    this._parseTracks();\n    this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, {mode: AbrMode.AUTO}));\n    CastEngine._logger.debug('Load end', this._tracks);\n    return Promise.resolve({tracks: this._tracks});\n  }\n\n  play(): void {\n    this._paused = false;\n  }\n\n  pause(): void {\n    this._paused = true;\n  }\n\n  hideTextTrack(): void {\n    // Empty implementation\n  }\n\n  selectTextTrack(textTrack: TextTrack): void {\n    this.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, {selectedTextTrack: textTrack}));\n  }\n\n  selectAudioTrack(audioTrack: AudioTrack): void {\n    this.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, {selectedAudioTrack: audioTrack}));\n  }\n\n  selectVideoTrack(videoTrack: VideoTrack): void {\n    this.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, {selectedVideoTrack: videoTrack}));\n  }\n\n  enableAdaptiveBitrate(): void {\n    // Empty implementation\n  }\n\n  isAdaptiveBitrateEnabled(): boolean {\n    return true;\n  }\n\n  getSelectedSource(): Object {\n    return Utils.Object.copyDeep(this._source);\n  }\n\n  isLive() {\n    return this._config.sources.type === MediaType.LIVE;\n  }\n\n  seekToLiveEdge(): void {\n    const range = this._playerManager.getLiveSeekableRange();\n    if (range) {\n      this._playerManager.seek(range.end);\n    }\n  }\n\n  getStartTimeOfDvrWindow(): number {\n    const range = this._playerManager.getLiveSeekableRange();\n    if (range) {\n      return range.start;\n    }\n    return 0;\n  }\n\n  reset(): void {\n    this._eventManager.removeAll();\n    this._tracks = [];\n    this._isLoaded = false;\n    this._paused = false;\n    this._seeking = false;\n    this._ended = false;\n  }\n\n  destroy(): void {\n    this._eventManager.destroy();\n    this._tracks = [];\n    this._isLoaded = false;\n    this._mediaElementEvents = [];\n    this._volume = 1;\n    this._muted = false;\n    this._paused = false;\n    this._seeking = false;\n    this._ended = false;\n    if (this._el) {\n      Utils.Dom.removeAttribute(this._el, 'src');\n      Utils.Dom.removeChild(this._el.parentNode, this._el);\n    }\n  }\n\n  set currentTime(value: number): void {\n    // Empty implementation\n  }\n\n  get currentTime(): number {\n    if (this.isLive()) {\n      return this._playerManager.getCurrentTimeSec() - this.getStartTimeOfDvrWindow();\n    }\n    if (this._ended) {\n      return this._playerManager.getDurationSec();\n    }\n    return this._playerManager.getCurrentTimeSec();\n  }\n\n  set muted(value: boolean): void {\n    this._muted = value;\n  }\n\n  get muted(): boolean {\n    return this._muted;\n  }\n\n  set volume(value: number): void {\n    this._volume = value;\n    this.dispatchEvent(EventType.VOLUME_CHANGE);\n  }\n\n  get volume(): number {\n    return this._volume;\n  }\n\n  get paused(): boolean {\n    return this._paused;\n  }\n\n  get seeking(): boolean {\n    return this._seeking;\n  }\n\n  get buffered(): Array<any> {\n    return [];\n  }\n\n  get duration(): number {\n    if (this.isLive()) {\n      const range = this._playerManager.getLiveSeekableRange();\n      if (range) {\n        return range.end - this.getStartTimeOfDvrWindow();\n      }\n    }\n    return this._playerManager.getDurationSec();\n  }\n\n  get src(): string {\n    return this._isLoaded ? this._source.url : '';\n  }\n\n  set playsinline(playsinline: boolean): void {\n    // Empty implementation\n  }\n\n  get playsinline(): boolean {\n    return true;\n  }\n\n  set playbackRate(playbackRate: number): void {\n    // Empty implementation\n  }\n\n  get playbackRate(): number {\n    return this._playerManager.getPlaybackRate();\n  }\n\n  get playbackRates(): Array<number> {\n    return [1];\n  }\n\n  get defaultPlaybackRate(): number {\n    return 1;\n  }\n\n  set crossOrigin(crossOrigin: ?string): void {\n    // Empty implementation\n  }\n\n  get crossOrigin(): ?string {\n    // Empty implementation\n    return null;\n  }\n\n  get ended(): boolean {\n    return this._ended;\n  }\n\n  _createVideoElement(): void {\n    const castMediaPlayerEl: Object = document.getElementsByTagName(CAST_MEDIA_PLAYER_TAG)[0];\n    if (castMediaPlayerEl) {\n      this._el = castMediaPlayerEl.getMediaElement();\n    }\n  }\n\n  _init(source: Object, config: Object): void {\n    this._source = source;\n    this._config = config;\n    this.attach();\n  }\n\n  _parseTracks(): void {\n    const audioTracksManager = this._playerManager.getAudioTracksManager();\n    const castAudioTracks = audioTracksManager.getTracks();\n    const audioTracks = this._parseAudioTracks(castAudioTracks);\n\n    const textTracksManager = this._playerManager.getTextTracksManager();\n    const castTextTracks = textTracksManager.getTracks();\n    const textTracks = this._parseTextTracks(castTextTracks);\n\n    this._tracks = audioTracks.concat(textTracks);\n  }\n\n  _parseTextTracks(castTextTracks: Array<Object>): Array<TextTrack> {\n    const textTracks = [];\n    castTextTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        kind: track.subType || 'subtitles',\n        active: false\n      };\n      textTracks.push(new TextTrack(settings));\n    });\n    return textTracks;\n  }\n\n  _parseAudioTracks(castAudioTracks: Array<Object>): Array<AudioTrack> {\n    const audioTracks = [];\n    castAudioTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      audioTracks.push(new AudioTrack(settings));\n    });\n    return audioTracks;\n  }\n}\n\nexport {CastEngine};\n","// @flow\nimport {core} from 'kaltura-player-js';\n\nconst {StreamType, EngineType} = core;\n\nconst DefaultPlayerConfig: Object = {\n  playback: {\n    autoplay: false,\n    preload: 'none',\n    disableUserCache: true,\n    streamPriority: [\n      {\n        engine: EngineType.CAST,\n        format: StreamType.HLS\n      },\n      {\n        engine: EngineType.CAST,\n        format: StreamType.DASH\n      },\n      {\n        engine: EngineType.CAST,\n        format: StreamType.PROGRESSIVE\n      }\n    ]\n  },\n  ui: {\n    disable: true\n  }\n};\n\nexport {DefaultPlayerConfig};\n","// @flow\nclass ReceiverError {\n  code: number;\n  description: string;\n\n  constructor(type: Object) {\n    this.code = type.code;\n    this.description = type.description;\n  }\n}\n\nexport {ReceiverError};\n","// @flow\nconst ErrorType: {[type: string]: Object} = {\n  CAST_ELEMENT_NOT_FOUND: {\n    code: 100020,\n    description: \"<cast-media-element> tag isn't found in the DOM\"\n  }\n};\n\nexport {ErrorType};\n","// @flow\nimport {core, setup} from 'kaltura-player-js';\nimport {CastEngine} from './cast-engine';\nimport {DefaultPlayerConfig} from './default-player-config';\nimport {ReceiverError} from './error/error';\nimport {ErrorType} from './error/error-type';\n\nconst {Utils, unRegisterEngine, registerEngine, EngineType} = core;\n\nexport const CAST_MEDIA_PLAYER_TAG: string = 'cast-media-player';\nconst PLAYER_CONTAINER: string = 'kaltura-receiver-player-container';\n\nclass PlayerLoader {\n  static loadPlayer(config: Object): Object {\n    const castMediaPlayerEl = Utils.Dom.getElementsByTagName(CAST_MEDIA_PLAYER_TAG)[0];\n    if (castMediaPlayerEl) {\n      const castMediaElement = castMediaPlayerEl.getMediaElement();\n      castMediaElement.style.position = 'absolute';\n      const playerContainerEl = Utils.Dom.createElement('div');\n      playerContainerEl.id = PLAYER_CONTAINER;\n      // Chromecast 2020 with Google TV sets display:none on player div, so define it inline so their css will not affect\n      playerContainerEl.style.display = 'block';\n      Utils.Dom.appendChild(document.body, playerContainerEl);\n      unRegisterEngine(EngineType.HTML5);\n      registerEngine(EngineType.CAST, CastEngine);\n      const playerConfig = Utils.Object.mergeDeep({targetId: PLAYER_CONTAINER}, DefaultPlayerConfig, config);\n      const player = setup(playerConfig);\n      Utils.Dom.prependTo(playerContainerEl, castMediaElement.parentNode);\n      return player;\n    } else {\n      throw new ReceiverError(ErrorType.CAST_ELEMENT_NOT_FOUND);\n    }\n  }\n}\n\nexport {PlayerLoader};\n","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\n\nconst {TextStyleConverter} = remote;\nconst {TrackType, getLogger} = core;\n\nclass ReceiverTracksManager {\n  _logger: any = getLogger('ReceiverTracksManager');\n  _playerManager: Object;\n  _player: Object;\n\n  constructor(player: Object) {\n    this._playerManager = cast.framework.CastReceiverContext.getInstance().getPlayerManager();\n    this._player = player;\n    this._attachListeners();\n  }\n\n  setInitialTracks(): void {\n    const mediaInfo = this._playerManager.getMediaInformation();\n    this._logger.debug('Set initial tracks', mediaInfo.customData);\n    if (mediaInfo.customData) {\n      this._setInitialAudioTrack(mediaInfo.customData.audioLanguage);\n      this._setInitialTextTrack(mediaInfo.customData.textLanguage);\n    }\n  }\n\n  _attachListeners(): void {\n    this._playerManager.addEventListener(cast.framework.events.EventType.REQUEST_EDIT_TRACKS_INFO, requestEvent => {\n      const activeTrackIds = requestEvent.requestData.activeTrackIds;\n      if (activeTrackIds) {\n        this._handleAudioTrackSelection(activeTrackIds);\n        this._handleTextTrackSelection(activeTrackIds);\n      } else {\n        const textTrackStyle = requestEvent.requestData.textTrackStyle;\n        this._handleTextStyleSelection(textTrackStyle);\n      }\n    });\n  }\n\n  _handleTextTrackSelection(activeTrackIds: Array<number>): void {\n    const textTracks = this._player.getTracks(TrackType.TEXT);\n    const activeTextTrack = textTracks.find(t => t.active);\n    const nextActiveTextTrack = textTracks.find(t => activeTrackIds.includes(t.id));\n    if (nextActiveTextTrack) {\n      this._player.selectTrack(nextActiveTextTrack);\n    } else if (activeTextTrack && activeTextTrack.language !== 'off') {\n      const offTrack = textTracks.find(t => t.language === 'off');\n      this._player.selectTrack(offTrack);\n    }\n  }\n\n  _handleAudioTrackSelection(activeTrackIds: Array<number>): void {\n    const audioTracks = this._player.getTracks(TrackType.AUDIO);\n    const activeAudioTrack = audioTracks.find(t => t.active);\n    const nextActiveAudioTrack = audioTracks.find(t => activeTrackIds.includes(t.id));\n    if (activeAudioTrack && nextActiveAudioTrack && activeAudioTrack.id !== nextActiveAudioTrack.id) {\n      this._player.selectTrack(nextActiveAudioTrack);\n    }\n  }\n\n  _handleTextStyleSelection(textStyle: Object): void {\n    this._player.textStyle = TextStyleConverter.toPlayerTextStyle(textStyle);\n  }\n\n  _setInitialTextTrack(textLanguage: ?string): void {\n    const textTracksManager = this._playerManager.getTextTracksManager();\n    const textTracks = this._player.getTracks(TrackType.TEXT);\n    if (textLanguage) {\n      if (textLanguage === 'off') {\n        this._logger.debug(`Initial track is off - don't set any track`);\n      } else {\n        if (textTracks.some(track => track.language === textLanguage)) {\n          this._logger.debug('Set initial text track - setActiveByLanguage', textLanguage);\n          textTracksManager.setActiveByLanguage(textLanguage);\n        } else {\n          this._logger.warn(`Text track ${textLanguage} doesn't exist in the supported text tracks`);\n        }\n      }\n    }\n  }\n\n  _setInitialAudioTrack(audioLanguage: ?string): void {\n    const audioTracksManager = this._playerManager.getAudioTracksManager();\n    const audioTracks = audioTracksManager.getTracks();\n    this._logger.debug('Set initial audio track', audioLanguage, audioTracks);\n    if (audioTracks.length > 0) {\n      if (audioLanguage) {\n        this._logger.debug('Set initial audio track - setActiveByLanguage', audioLanguage);\n        audioTracksManager.setActiveByLanguage(audioLanguage);\n      } else {\n        const audioTrackId = audioTracks[0].trackId;\n        const audioTrack = this._player.getTracks(TrackType.AUDIO).find(t => t.id === audioTrackId);\n        if (audioTrack) {\n          this._logger.debug('Set initial audio track - setActiveById', audioTrackId);\n          audioTracksManager.setActiveById(audioTrackId);\n          this._player.selectTrack(audioTrack);\n        }\n      }\n    }\n  }\n}\n\nexport {ReceiverTracksManager};\n","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {CUSTOM_CHANNEL} from './receiver-manager';\n\nconst {EventType, Ad, AdBreak, AdBreakType, getLogger, FakeEvent} = core;\nconst {CustomEventMessage} = remote;\n\nclass ReceiverAdsManager {\n  _logger: any = getLogger('ReceiverAdsManager');\n  _context: Object;\n  _playerManager: Object;\n  _player: Object;\n  _adProgressIntervalId: ?IntervalID;\n  _ad: ?Ad;\n  _adBreak: ?AdBreak;\n  _adIsPlaying: boolean;\n  _adCanSkipTriggered: boolean = false;\n  _adLifecycleEventHandlers: {[event: string]: Function};\n  _adTrackingEventHandlers: {[event: string]: Function};\n  _playerEventHandlers: {[event: string]: Function};\n  _timePercentEvent: {[time: string]: boolean} = {\n    AD_REACHED_25_PERCENT: false,\n    AD_REACHED_50_PERCENT: false,\n    AD_REACHED_75_PERCENT: false\n  };\n\n  constructor(player: Object) {\n    this._context = cast.framework.CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._player = player;\n    this._attachListeners();\n  }\n\n  skipAd(): void {\n    this._logger.debug('Skip ad');\n    const requestData = new cast.framework.messages.RequestData(cast.framework.messages.MessageType.SKIP_AD);\n    this._playerManager.sendLocalMediaRequest(requestData);\n  }\n\n  adBreak(): boolean {\n    return !!this._adBreak;\n  }\n\n  _attachListeners(): void {\n    this._adLifecycleEventHandlers = {\n      [cast.framework.events.EventType.PLAYER_LOAD_COMPLETE]: this._onPlayerLoadComplete.bind(this),\n      [cast.framework.events.EventType.BREAK_STARTED]: this._onBreakStarted.bind(this),\n      [cast.framework.events.EventType.BREAK_ENDED]: this._onBreakEnded.bind(this),\n      [cast.framework.events.EventType.BREAK_CLIP_LOADING]: this._onBreakClipLoading.bind(this),\n      [cast.framework.events.EventType.BREAK_CLIP_STARTED]: this._onBreakClipStarted.bind(this),\n      [cast.framework.events.EventType.BREAK_CLIP_ENDED]: this._onBreakClipEnded.bind(this)\n    };\n    this._adTrackingEventHandlers = {\n      [cast.framework.events.EventType.PAUSE]: this._onAdPaused.bind(this),\n      [cast.framework.events.EventType.PLAY]: this._onAdResumed.bind(this)\n    };\n    this._playerEventHandlers = {\n      [EventType.MUTE_CHANGE]: this._onMuteChange.bind(this),\n      [EventType.VOLUME_CHANGE]: this._onVolumeChange.bind(this)\n    };\n    Object.keys(this._adLifecycleEventHandlers).forEach(event => this._playerManager.addEventListener(event, this._adLifecycleEventHandlers[event]));\n  }\n\n  _onPlayerLoadComplete = () => {\n    const positions = [];\n    const breakManager = this._playerManager.getBreakManager();\n    if (breakManager) {\n      const breaks = breakManager.getBreaks();\n      if (breaks && breaks.length > 0) {\n        breaks.forEach(b => positions.push(b.position));\n        this._sendEventAndCustomMessage(this._player.Event.AD_MANIFEST_LOADED, {adBreaksPosition: positions});\n      }\n    }\n  };\n\n  _onBreakStarted = (breaksEvent: Object) => {\n    this._toggleAdBreakListeners(true);\n    const adBreakOptions = this._getAdBreakOptions(breaksEvent);\n    const adBreak = new AdBreak(adBreakOptions);\n    this._sendEventAndCustomMessage(this._player.Event.AD_BREAK_START, {adBreak: adBreak});\n    this._adBreak = adBreak;\n  };\n\n  _onBreakEnded = (breaksEvent: Object) => {\n    this._toggleAdBreakListeners(false);\n    this._sendEventAndCustomMessage(this._player.Event.AD_BREAK_END);\n    this._adBreak = null;\n    const breaks = this._playerManager.getBreakManager().getBreaks();\n    const index = breaks.findIndex(b => b.id === breaksEvent.breakId);\n    if (index + 1 === breaks.length) {\n      this._sendEventAndCustomMessage(this._player.Event.ALL_ADS_COMPLETED);\n    }\n  };\n\n  _onBreakClipLoading = (breaksEvent: Object) => {\n    const adOptions = this._getAdOptions(breaksEvent);\n    const ad = new Ad(breaksEvent.breakClipId, adOptions);\n    this._sendEventAndCustomMessage(this._player.Event.AD_LOADED, {ad: ad});\n    this._ad = ad;\n  };\n\n  _onBreakClipStarted = (breaksEvent: Object) => {\n    const adOptions = this._getAdOptions(breaksEvent);\n    const ad = new Ad(breaksEvent.breakClipId, adOptions);\n    this._sendEventAndCustomMessage(this._player.Event.AD_STARTED, {ad});\n    this._adIsPlaying = true;\n  };\n\n  _onBreakClipEnded = () => {\n    this._sendEventAndCustomMessage(this._player.Event.AD_COMPLETED);\n    this._adIsPlaying = false;\n    this._adCanSkipTriggered = false;\n    this._ad = null;\n  };\n\n  _onAdPaused = () => {\n    this._sendEventAndCustomMessage(this._player.Event.AD_PAUSED);\n    this._adIsPlaying = false;\n  };\n\n  _onAdResumed = () => {\n    this._sendEventAndCustomMessage(this._player.Event.AD_RESUMED);\n    this._adIsPlaying = true;\n  };\n\n  _onAdProgress = () => {\n    if (!this._ad) return;\n    const adDuration = this._playerManager.getBreakClipDurationSec();\n    const adCurrentTime = this._playerManager.getBreakClipCurrentTimeSec();\n    const percent = adCurrentTime / adDuration;\n    if (!this._timePercentEvent.AD_REACHED_25_PERCENT && percent >= 0.25) {\n      this._timePercentEvent.AD_REACHED_25_PERCENT = true;\n      this._sendEventAndCustomMessage(this._player.Event.AD_FIRST_QUARTILE);\n    }\n    if (!this._timePercentEvent.AD_REACHED_50_PERCENT && percent >= 0.5) {\n      this._timePercentEvent.AD_REACHED_50_PERCENT = true;\n      this._sendEventAndCustomMessage(this._player.Event.AD_MIDPOINT);\n    }\n    if (!this._timePercentEvent.AD_REACHED_75_PERCENT && percent >= 0.75) {\n      this._timePercentEvent.AD_REACHED_75_PERCENT = true;\n      this._sendEventAndCustomMessage(this._player.Event.AD_THIRD_QUARTILE);\n    }\n    if (this._ad && !this._adCanSkipTriggered && this._ad && this._ad.skippable) {\n      if (adCurrentTime >= this._ad.skipOffset) {\n        this._sendEventAndCustomMessage(this._player.Event.AD_CAN_SKIP);\n        this._adCanSkipTriggered = true;\n      }\n    }\n    this._sendEventAndCustomMessage(this._player.Event.AD_PROGRESS, {\n      adProgress: {\n        currentTime: adCurrentTime,\n        duration: adDuration\n      }\n    });\n  };\n\n  _onMuteChange = () => {\n    if (this._player.muted) {\n      this._sendEventAndCustomMessage(this._player.Event.AD_MUTED);\n    }\n  };\n\n  _onVolumeChange = () => {\n    this._sendEventAndCustomMessage(this._player.Event.AD_VOLUME_CHANGED);\n  };\n\n  _toggleAdBreakListeners(toggle: boolean): void {\n    if (toggle) {\n      Object.keys(this._adTrackingEventHandlers).forEach(event => this._playerManager.addEventListener(event, this._adTrackingEventHandlers[event]));\n      Object.keys(this._playerEventHandlers).forEach(event => this._player.addEventListener(event, this._playerEventHandlers[event]));\n      this._adProgressIntervalId = setInterval(this._onAdProgress.bind(this), 300);\n    } else {\n      Object.keys(this._adTrackingEventHandlers).forEach(event =>\n        this._playerManager.removeEventListener(event, this._adTrackingEventHandlers[event])\n      );\n      Object.keys(this._playerEventHandlers).forEach(event => this._player.removeEventListener(event, this._playerEventHandlers[event]));\n      if (this._adProgressIntervalId) {\n        clearInterval(this._adProgressIntervalId);\n        this._adProgressIntervalId = null;\n      }\n    }\n  }\n\n  _getAdBreakOptions(breaksEvent: Object): Object {\n    const options = {};\n    const currentBreak = this._playerManager.getBreakManager().getBreakById(breaksEvent.breakId);\n    if (currentBreak) {\n      options.position = currentBreak.position;\n      options.type = this._getAdBreakTypeByPosition(currentBreak.position);\n      options.numAds = currentBreak.breakClipIds.length;\n    }\n    return options;\n  }\n\n  _getAdBreakTypeByPosition(position: number): void {\n    switch (position) {\n      case 0:\n        return AdBreakType.PRE;\n      case -1:\n        return AdBreakType.POST;\n      default:\n        return AdBreakType.MID;\n    }\n  }\n\n  _getAdOptions(breaksEvent: Object): Object {\n    const options = {};\n    const currentBreak = this._playerManager.getBreakManager().getBreakById(breaksEvent.breakId);\n    if (currentBreak) {\n      const currentBreakClip = this._playerManager.getBreakManager().getBreakClipById(breaksEvent.breakClipId);\n      options.url = currentBreakClip.contentId;\n      options.contentType = currentBreakClip.contentType;\n      options.title = currentBreakClip.title;\n      options.position = currentBreak.breakClipIds.indexOf(currentBreakClip.id) + 1;\n      options.duration = currentBreakClip.duration;\n      options.clickThroughUrl = currentBreakClip.clickThroughUrl;\n      options.posterUrl = currentBreakClip.posterUrl;\n      options.skipOffset = currentBreakClip.whenSkippable;\n      options.linear = true;\n    }\n    return options;\n  }\n\n  _sendEventAndCustomMessage(event: string, payload: any): void {\n    this._logger.debug(event.toUpperCase(), payload);\n    this._player.dispatchEvent(new FakeEvent(event, payload));\n    this._context.sendCustomMessage(CUSTOM_CHANNEL, undefined, new CustomEventMessage(event, payload));\n  }\n}\n\nexport {ReceiverAdsManager};\n","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {PlayerLoader} from './player-loader';\nimport {ReceiverTracksManager} from './receiver-tracks-manager';\nimport {ReceiverAdsManager} from './receiver-ads-manager';\n\nconst {FakeEvent, EventManager, DrmScheme, Utils, getLogger} = core;\nconst {CustomMessageType, CustomActionType, CustomActionMessage} = remote;\n\nexport const CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\nconst BROADCAST_STATUS_INTERVAL_FREQ: number = 1000;\nconst LIVE_EDGE = -1;\n\nclass ReceiverManager {\n  _logger: any = getLogger('ReceiverManager');\n  _context: Object;\n  _playerManager: Object;\n  _eventManager: EventManager;\n  _player: Object;\n  _shouldAutoPlay: boolean = true;\n  _firstPlay: boolean = true;\n  _tracksManager: ReceiverTracksManager;\n  _adsManager: ReceiverAdsManager;\n  _broadcastStatusIntervalId: IntervalID | null = null;\n  _messageInterceptorsHandlers: {[message: string]: Function} = {\n    [cast.framework.messages.MessageType.LOAD]: this.onLoad,\n    [cast.framework.messages.MessageType.MEDIA_STATUS]: this.onMediaStatus,\n    [cast.framework.messages.MessageType.STOP]: this.onStop\n  };\n  _playerManagerEventHandlers: {[event: string]: Function} = {\n    [cast.framework.events.EventType.REQUEST_PLAY]: this._onRequestPlayEvent,\n    [cast.framework.events.EventType.REQUEST_PAUSE]: this._onRequestPauseEvent,\n    [cast.framework.events.EventType.PLAY]: this._onPlayEvent,\n    [cast.framework.events.EventType.PLAYER_LOAD_COMPLETE]: this._onPlayerLoadCompleteEvent\n  };\n  _castContextEventHandlers: {[event: string]: Function} = {\n    [cast.framework.system.EventType.SYSTEM_VOLUME_CHANGED]: this._onSystemVolumeChangedEvent\n  };\n\n  constructor(config: Object) {\n    this._context = cast.framework.CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._eventManager = new EventManager();\n    this._player = PlayerLoader.loadPlayer(config);\n    this._tracksManager = new ReceiverTracksManager(this._player);\n    this._adsManager = new ReceiverAdsManager(this._player);\n    this._attachListeners();\n  }\n\n  getPlayer(): Object {\n    return this._player;\n  }\n\n  start(options: Object): void {\n    const defaultOptions = new cast.framework.CastReceiverOptions();\n    defaultOptions.customNamespaces = {\n      [CUSTOM_CHANNEL]: cast.framework.system.MessageType.JSON\n    };\n    Utils.Object.mergeDeep(defaultOptions, options);\n    this._logger.debug('Start receiver', defaultOptions);\n    this._context.start(defaultOptions);\n  }\n\n  onLoad(loadRequestData: Object): Promise<Object> {\n    this._logger.debug('onLoad', loadRequestData);\n    this._reset();\n    return new Promise((resovle, reject) => {\n      const mediaInfo = loadRequestData.media.customData.mediaInfo;\n      const mediaConfig = loadRequestData.media.customData.mediaConfig;\n      this._maybeCreateVmapAdsRequest(loadRequestData.media);\n      this._maybeReplaceAdTagTimestamp(loadRequestData.media);\n      this._eventManager.listen(this._player, this._player.Event.ERROR, event => reject(event));\n      this._eventManager.listen(this._player, this._player.Event.SOURCE_SELECTED, event => this._onSourceSelected(event, loadRequestData, resovle));\n      if (mediaInfo) {\n        this._logger.debug('loadMedia', mediaInfo);\n        this._player.loadMedia(mediaInfo);\n      } else {\n        this._logger.debug('setMedia', mediaConfig);\n        this._player.setMedia(mediaConfig);\n      }\n    });\n  }\n\n  onStop(requestData: Object): Promise<Object> {\n    this._logger.debug('onStop', requestData);\n    this._destroy();\n    return requestData;\n  }\n\n  onMediaStatus(mediaStatus: Object): Promise<Object> {\n    this._logger.debug('mediaStatus', mediaStatus);\n    mediaStatus.customData = mediaStatus.customData || {};\n    if (this._player) {\n      mediaStatus.customData.mediaInfo = this._player.getMediaInfo();\n      if (this._player.isLive() && mediaStatus.media) {\n        mediaStatus.media.duration = this._player.duration;\n      }\n    }\n    if (mediaStatus.playerState !== this._playerManager.getPlayerState()) {\n      mediaStatus.playerState = this._playerManager.getPlayerState();\n    }\n    return mediaStatus;\n  }\n\n  _attachListeners(): void {\n    this._context.addCustomMessageListener(CUSTOM_CHANNEL, customMessage => this._onCustomMessage(customMessage));\n    Object.keys(this._playerManagerEventHandlers).forEach(event =>\n      this._playerManager.addEventListener(event, this._playerManagerEventHandlers[event].bind(this))\n    );\n    Object.keys(this._messageInterceptorsHandlers).forEach(msg =>\n      this._playerManager.setMessageInterceptor(msg, this._messageInterceptorsHandlers[msg].bind(this))\n    );\n    Object.keys(this._castContextEventHandlers).forEach(event =>\n      this._context.addEventListener(event, this._castContextEventHandlers[event].bind(this))\n    );\n  }\n\n  _reset(): void {\n    this._shouldAutoPlay = true;\n    this._firstPlay = true;\n    this._clearBroadcastStatusInterval();\n    this._eventManager.removeAll();\n    this._player.reset();\n  }\n\n  _destroy(): void {\n    this._shouldAutoPlay = true;\n    this._firstPlay = true;\n    this._clearBroadcastStatusInterval();\n    this._eventManager.destroy();\n    this._player.destroy();\n  }\n\n  _onSourceSelected(event: FakeEvent, loadRequestData: Object, resolve: Function): void {\n    const source = event.payload.selectedSource[0];\n    this._handleAutoPlay(loadRequestData);\n    this._handleLiveDvr(loadRequestData);\n    this._setMediaInfo(loadRequestData, source);\n    this._maybeSetDrmLicenseUrl(source);\n    const sources = this._player.config.sources;\n    if (sources.options && sources.options.forceRedirectExternalStreams) {\n      this._logger.debug('Redirect stream started');\n      Utils.Http.jsonp(loadRequestData.media.contentUrl, (data, url) => {\n        loadRequestData.media.contentUrl = sources.options.redirectExternalStreamsHandler(data, url);\n        this._logger.debug('Redirect stream ended', loadRequestData.media.contentUrl);\n        resolve(loadRequestData);\n      });\n    } else {\n      resolve(loadRequestData);\n    }\n  }\n\n  _setMediaInfo(loadRequestData: Object, source: Object): void {\n    loadRequestData.media.contentId = loadRequestData.media.contentId || source.id;\n    loadRequestData.media.contentUrl = loadRequestData.media.contentUrl || source.url;\n    loadRequestData.media.contentType = loadRequestData.media.contentType || source.mimetype;\n    loadRequestData.media.streamType = this._player.isLive() ? cast.framework.messages.StreamType.LIVE : cast.framework.messages.StreamType.BUFFERED;\n    loadRequestData.media.metadata = loadRequestData.media.metadata || new cast.framework.messages.GenericMediaMetadata();\n    loadRequestData.media.metadata.title = loadRequestData.media.metadata.title || this._player.config.sources.metadata.name;\n    loadRequestData.media.metadata.subtitle = loadRequestData.media.metadata.subtitle || this._player.config.sources.metadata.description;\n    loadRequestData.media.metadata.images = loadRequestData.media.metadata.images || [{url: this._player.config.sources.poster}];\n    loadRequestData.media.hlsSegmentFormat = loadRequestData.media.hlsSegmentFormat || cast.framework.messages.HlsSegmentFormat.TS;\n    this._logger.debug('Media info has been set', loadRequestData);\n  }\n\n  _handleAutoPlay(loadRequestData: Object): void {\n    if (!loadRequestData.autoplay) {\n      this._shouldAutoPlay = false;\n      loadRequestData.autoplay = true;\n    }\n  }\n\n  _handleLiveDvr(loadRequestData: Object): void {\n    if (this._player.isDvr() && loadRequestData.currentTime === LIVE_EDGE) {\n      delete loadRequestData.currentTime;\n      this._logger.debug(`Live DVR will seek to live edge`);\n    }\n  }\n\n  _maybeSetDrmLicenseUrl(source: Object): void {\n    if (source.drmData) {\n      const data = source.drmData.find(data => data.scheme === DrmScheme.WIDEVINE);\n      if (data) {\n        this._playerManager.setMediaPlaybackInfoHandler((loadRequest, playbackConfig) => {\n          playbackConfig.protectionSystem = cast.framework.ContentProtection.WIDEVINE;\n          playbackConfig.licenseUrl = data.licenseUrl;\n          this._logger.debug(`Set drm license url`, playbackConfig);\n          return playbackConfig;\n        });\n      }\n    }\n  }\n\n  _onPlayEvent(): void {\n    this._logger.debug('Play event', {firstPlay: this._firstPlay});\n    if (this._firstPlay) {\n      if (this._shouldAutoPlay) {\n        this._player.play();\n      } else {\n        this._playerManager.pause();\n      }\n      this._firstPlay = false;\n    }\n  }\n\n  _onRequestPlayEvent(): void {\n    this._logger.debug('Request play event');\n    this._player.play();\n    this._clearBroadcastStatusInterval();\n  }\n\n  _onRequestPauseEvent(): void {\n    this._logger.debug('Request pause event');\n    this._player.pause();\n    // on live dvr pause continue to broadcast media status to help senders refresh their UIs\n    if (this._player.isDvr()) {\n      this._clearBroadcastStatusInterval();\n      this._broadcastStatusIntervalId = setInterval(() => {\n        this._playerManager.broadcastStatus(true);\n      }, BROADCAST_STATUS_INTERVAL_FREQ);\n    }\n  }\n\n  _clearBroadcastStatusInterval(): void {\n    if (this._broadcastStatusIntervalId) {\n      clearInterval(this._broadcastStatusIntervalId);\n      this._broadcastStatusIntervalId = null;\n    }\n  }\n\n  _onPlayerLoadCompleteEvent(): void {\n    const loadPlayerAndSetInitialTracks = () => {\n      this._player.load();\n      this._player.ready().then(() => this._tracksManager.setInitialTracks());\n    };\n    this._logger.debug('Player load complete');\n    if (this._adsManager.adBreak()) {\n      this._eventManager.listenOnce(this._player, this._player.Event.AD_BREAK_END, () => {\n        this._eventManager.listenOnce(this._player, this._player.Event.PLAYING, loadPlayerAndSetInitialTracks);\n      });\n    } else {\n      loadPlayerAndSetInitialTracks();\n    }\n  }\n\n  _onSystemVolumeChangedEvent(systemVolumeChangedEvent: Object): void {\n    const data = systemVolumeChangedEvent.data;\n    if (this._player.volume !== data.level) {\n      this._player.volume = data.level;\n    }\n    if (this._player.muted !== data.muted) {\n      this._player.muted = data.muted;\n    }\n  }\n\n  _onCustomMessage(customMessageEvent: Object): void {\n    const customMessage = customMessageEvent.data;\n    this._logger.debug('Custom message received', customMessage);\n    switch (customMessage.type) {\n      case CustomMessageType.ACTION:\n        this._handleCustomAction(customMessage);\n        break;\n      default:\n        break;\n    }\n  }\n\n  _handleCustomAction(customAction: CustomActionMessage): void {\n    switch (customAction.action) {\n      case CustomActionType.SKIP_AD:\n        this._adsManager.skipAd();\n        break;\n      default:\n        break;\n    }\n  }\n\n  _maybeCreateVmapAdsRequest(media: Object): void {\n    if (media.customData && media.customData.vmapAdsRequest) {\n      media.vmapAdsRequest = media.customData.vmapAdsRequest;\n    }\n  }\n\n  _maybeReplaceAdTagTimestamp(media: Object): void {\n    const replaceTimestamp = adtag => {\n      if (adtag && regex.test(adtag)) {\n        const match = adtag.match(regex);\n        return adtag.replace(match[1], Date.now());\n      }\n      return adtag;\n    };\n    const regex = /correlator=(\\[timestamp\\])/;\n    if (media.breakClips) {\n      const breakClips = media.breakClips;\n      breakClips.forEach(breakClip => {\n        if (breakClip.vastAdsRequest && breakClip.vastAdsRequest.adTagUrl) {\n          breakClip.vastAdsRequest.adTagUrl = replaceTimestamp(breakClip.vastAdsRequest.adTagUrl);\n        }\n      });\n    }\n    if (media.vmapAdsRequest) {\n      media.vmapAdsRequest.adTagUrl = replaceTimestamp(media.vmapAdsRequest.adTagUrl);\n    }\n  }\n}\n\nexport {ReceiverManager};\n","// @flow\nimport {ReceiverManager} from './receiver-manager';\n\nlet receiverManager;\n\n/**\n * Kaltura Receiver Player SDK.\n * @class Receiver\n * @param {KPReceiverOptionsObject} config - The receiver SDK configuration.\n */\nclass ReceiverManagerAPI {\n  constructor(config: KPReceiverOptionsObject) {\n    receiverManager = new ReceiverManager(config);\n  }\n\n  /**\n   * Initializes the receiver SDK, so that receiver app can receive requests from senders.\n   * Internally calls to cast.framework.CastReceiverContext.start() to initializes system manager and media manager.\n   * @public\n   * @instance\n   * @param {Object=} options - Cast receiver context options. All options are optional. See {@link https://developers.google.com/cast/docs/reference/caf_receiver/cast.framework.CastReceiverOptions|cast.framework.CastReceiverOptions}\n   * @returns {void}\n   * @memberof Receiver\n   */\n  start(options?: Object = {}): void {\n    receiverManager.start(options);\n  }\n\n  /**\n   * The LOAD default handler of the receiver SDK. This handler should be called just in case LOAD interceptor is override by the app, otherwise it will be called internally.\n   * @public\n   * @instance\n   * @param {Object} loadRequestData - Media event LOAD request data. See {@link https://developers.google.com/cast/docs/reference/caf_receiver/cast.framework.messages.LoadRequestData|cast.framework.messages.LoadRequestData}\n   * @returns {Promise<Object>} - The load promise.\n   * @memberof Receiver\n   */\n  onLoad(loadRequestData: Object): Promise<Object> {\n    return receiverManager.onLoad(loadRequestData);\n  }\n\n  /**\n   * Adding an event listener to a receiver player event.\n   * @public\n   * @instance\n   * @param {string} type - The event type.\n   * @param {Function} listener - The event handler.\n   * @returns {void}\n   * @memberof Receiver\n   */\n  addEventListener(type: string, listener: Function): void {\n    receiverManager.getPlayer().addEventListener(type, listener);\n  }\n\n  /**\n   * Removing an event listener from a receiver player event.\n   * @public\n   * @instance\n   * @param {string} type - The event type.\n   * @param {Function} listener - The event handler.\n   * @returns {void}\n   * @memberof Receiver\n   */\n  removeEventListener(type: string, listener: Function): void {\n    receiverManager.getPlayer().removeEventListener(type, listener);\n  }\n}\n\nexport {ReceiverManagerAPI};\n","// @flow\nimport {ReceiverManagerAPI} from './receiver-manager-api';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst VERSION = __VERSION__;\nconst NAME = __NAME__;\n\nexport {ReceiverManagerAPI as Receiver};\nexport {VERSION, NAME};\n"],"sourceRoot":""}